{"ast":null,"code":"import _classCallCheck from \"/Users/maksimzajcev/Desktop/Work/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/maksimzajcev/Desktop/Work/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/maksimzajcev/Desktop/Work/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/maksimzajcev/Desktop/Work/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/maksimzajcev/Desktop/Work/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/maksimzajcev/Desktop/Work/src/components/React.reports.js\";\nimport React from 'react';\nimport Navigation from './React.nav';\nimport Loader from './React.loader';\nimport moment from 'moment';\nimport ReportsWorkspace from './React.reports.workspace';\nimport '../css/main.css';\nvar COLORS = ['#4461c2', '#16a65e', '#85d357', '#ffdc45', '#ff4716', '#6ab4ec', '#b63dbc', '#fdaa19', '#fcacfd', '#8e8cd8'];\nvar urlLogs = 'http://localhost:3000/logs';\n\nvar Reports =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Reports, _React$Component);\n\n  function Reports(props) {\n    var _this;\n\n    _classCallCheck(this, Reports);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Reports).call(this, props));\n\n    _this.setPeriod = function (changedPeriod) {\n      _this.setState({\n        loading: false\n      });\n\n      _this.loadData(changedPeriod);\n    };\n\n    _this.state = {\n      chartReports: [],\n      startDate: '',\n      finishDate: '',\n      loading: false,\n      settingPeriod: moment(new Date()).format('MM.YYYY')\n    };\n    return _this;\n  }\n\n  _createClass(Reports, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.loadData(this.state.settingPeriod);\n    }\n  }, {\n    key: \"loadData\",\n    value: function loadData(period) {\n      var _this2 = this;\n\n      console.log(\"Загружаемый период:\");\n      console.log(period);\n      fetch(urlLogs + '?period=' + period).then(function (response) {\n        console.log(response);\n        return response.json();\n      }).then(function (result) {\n        return _this2.parseData(result, period);\n      }).catch(function (e) {\n        return console.log(e);\n      });\n    }\n  }, {\n    key: \"parseData\",\n    value: function parseData(usersLogs, period) {\n      console.log('Пришедшие логи:');\n      console.log(usersLogs);\n      var begin = moment('01.' + period.slice(0, 2), 'DD.MM');\n      var end = moment('01.' + period.slice(0, 2), 'DD.MM').add(1, 'month');\n      var allLogs = this.getAllLogs(usersLogs);\n      var listReports = this.getReports(allLogs);\n      var chartReports = this.getDataReports(listReports, allLogs, begin, end);\n      console.log('Сформированные графики:');\n      console.log(chartReports);\n      var defaultChart = this.getDefaultChart();\n      this.setState({\n        chartReports: chartReports,\n        defaultChart: defaultChart,\n        startDate: begin.format('DD.MM'),\n        finishDate: end.format('DD.MM'),\n        loading: true\n      });\n    }\n  }, {\n    key: \"getAllLogs\",\n    value: function getAllLogs(userLogs) {\n      var allLogs = [];\n\n      for (var i = 0; i < userLogs.length; i++) {\n        var logItems = userLogs[i].logItems;\n\n        for (var j = 0; j < logItems.length; j++) {\n          allLogs.push(logItems[j]);\n        }\n      }\n\n      return allLogs;\n    }\n  }, {\n    key: \"getReports\",\n    value: function getReports(allLogs) {\n      var reports = [];\n\n      for (var i = 0; i < allLogs.length; i++) {\n        var presentLog = allLogs[i];\n        var havePresentLog = false;\n\n        for (var j = 0; j < reports.length; j++) {\n          if (presentLog.title === reports[j].name) {\n            havePresentLog = true;\n            reports[j].count++;\n          }\n        }\n\n        if (!havePresentLog) {\n          var addLogItem = {\n            name: presentLog.title,\n            color: COLORS[reports.length % 10],\n            link: presentLog.link,\n            display: true,\n            count: 1\n          };\n          reports.push(addLogItem);\n        }\n      }\n\n      return reports;\n    }\n  }, {\n    key: \"getDataReports\",\n    value: function getDataReports(listReports, allLogs, startDate, finishDate) {\n      for (var i = 0; i < listReports.length; i++) {\n        var presentReport = listReports[i];\n        var start = startDate;\n        var finish = finishDate;\n        presentReport.monthData = [];\n        console.log('START');\n        console.log(start.format('YYYY-MM-DD'));\n        console.log('STARTDATE');\n        console.log(startDate.format('YYYY-MM-DD'));\n        console.log('FINISH');\n        console.log(finish.format('YYYY-MM-DD'));\n\n        while (moment(finish.format('YYYY-MM-DD')).isAfter(start.format('YYYY-MM-DD'))) {\n          var visitsOnDay = 0;\n\n          for (var z = 0; z < allLogs.length; z++) {\n            if (allLogs[z].date == start.format('DD.MM') && allLogs[z].title === presentReport.name) {\n              visitsOnDay++;\n            }\n          }\n\n          var oneDayValue = {\n            x: start.format('DD.MM'),\n            y: visitsOnDay\n          };\n          start = start.add(1, 'days');\n          presentReport.monthData.push(oneDayValue);\n        }\n      }\n\n      return listReports;\n    }\n  }, {\n    key: \"getDefaultChart\",\n    value: function getDefaultChart() {\n      var currentlyDate = moment(new Date(), 'DD.MM');\n      var startDate = currentlyDate.subtract(15, \"days\");\n      var defaultDays = [];\n\n      for (var i = 15; i > 0; i--) {\n        var oneDay = {\n          x: startDate.format('DD.MM'),\n          y: 0\n        };\n        startDate = startDate.add(1, \"days\");\n        defaultDays.push(oneDay);\n      }\n\n      return defaultDays;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        id: \"maskComponent\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, !this.state.loading ? React.createElement(Loader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }) : null, React.createElement(\"div\", {\n        className: \"sidebar\",\n        id: \"sidebar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, React.createElement(Navigation, {\n        activeItem: 7718,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"panel\",\n        id: \"panel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, React.createElement(ReportsWorkspace, {\n        chartReports: this.state.chartReports,\n        startDate: this.state.startDate,\n        finishDate: this.state.finishDate,\n        defaultChart: this.state.defaultChart,\n        settingPeriod: this.state.settingPeriod,\n        setPeriod: this.setPeriod,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Reports;\n}(React.Component);\n\nexport default Reports;","map":{"version":3,"sources":["/Users/maksimzajcev/Desktop/Work/src/components/React.reports.js"],"names":["React","Navigation","Loader","moment","ReportsWorkspace","COLORS","urlLogs","Reports","props","setPeriod","changedPeriod","setState","loading","loadData","state","chartReports","startDate","finishDate","settingPeriod","Date","format","period","console","log","fetch","then","response","json","result","parseData","catch","e","usersLogs","begin","slice","end","add","allLogs","getAllLogs","listReports","getReports","getDataReports","defaultChart","getDefaultChart","userLogs","i","length","logItems","j","push","reports","presentLog","havePresentLog","title","name","count","addLogItem","color","link","display","presentReport","start","finish","monthData","isAfter","visitsOnDay","z","date","oneDayValue","x","y","currentlyDate","subtract","defaultDays","oneDay","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Navigation from './React.nav';\nimport Loader from './React.loader';\nimport moment from 'moment'\nimport ReportsWorkspace from './React.reports.workspace';\nimport '../css/main.css';\n\nconst COLORS = [\n    '#4461c2',\n    '#16a65e',\n    '#85d357',\n    '#ffdc45',\n    '#ff4716',\n    '#6ab4ec',\n    '#b63dbc',\n    '#fdaa19',\n    '#fcacfd',\n    '#8e8cd8'\n];\n\nconst urlLogs = 'http://localhost:3000/logs';\n\nclass Reports extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            chartReports: [],\n            startDate: '',\n            finishDate: '',\n            loading: false,\n            settingPeriod: moment(new Date()).format('MM.YYYY'),  \n        };\n    }\n\n    componentWillMount() {\n        this.loadData(this.state.settingPeriod);\n    }\n\n    loadData(period) {\n        console.log(\"Загружаемый период:\");\n        console.log(period);\n        fetch(urlLogs + '?period=' + period)\n            .then(function(response) {\n                console.log(response);\n                return response.json();\n            })\n            .then(result => this.parseData(result, period))\n            .catch(e => console.log(e));\n    }\n\n    parseData(usersLogs, period) {\n        console.log('Пришедшие логи:');\n        console.log(usersLogs);\n        \n        var begin = moment('01.' + period.slice(0, 2), 'DD.MM');\n        var end = moment('01.' + period.slice(0, 2), 'DD.MM').add(1, 'month');\n\n        var allLogs = this.getAllLogs(usersLogs);\n        var listReports = this.getReports(allLogs);\n        var chartReports = this.getDataReports(listReports, allLogs, begin, end);\n        \n        console.log('Сформированные графики:');\n        console.log(chartReports);\n        \n        \n        var defaultChart = this.getDefaultChart();\n\n        this.setState({\n            chartReports: chartReports,\n            defaultChart: defaultChart,\n            startDate: begin.format('DD.MM'),\n            finishDate: end.format('DD.MM'),\n            loading: true\n        });\n    }\n\n    setPeriod = (changedPeriod) => {\n        this.setState({\n            loading: false\n        });\n\n        this.loadData(changedPeriod);\n    }\n\n    getAllLogs(userLogs) {\n        var allLogs = [];\n\n        for (let i = 0; i < userLogs.length; i++) {\n            var logItems = userLogs[i].logItems;\n            for (let j = 0; j < logItems.length; j++) {\n                allLogs.push(logItems[j]);\n            }\n        }\n\n        return allLogs;\n    }\n\n    getReports(allLogs) {\n        var reports = [];\n\n        for (let i = 0; i < allLogs.length; i++) {\n            var presentLog = allLogs[i];\n            var havePresentLog = false;\n            for (let j = 0; j < reports.length; j++) {\n                if (presentLog.title === reports[j].name) {\n                    havePresentLog = true;\n                    reports[j].count++;\n                }\n            }\n            if (!havePresentLog) {\n                var addLogItem = {\n                    name: presentLog.title,\n                    color: COLORS[reports.length % 10],\n                    link: presentLog.link,\n                    display: true,\n                    count: 1\n                }\n\n                reports.push(addLogItem);\n            }\n        }\n\n        return reports;\n    }\n\n    getDataReports(listReports, allLogs, startDate, finishDate) {\n        for (let i = 0; i < listReports.length; i++) {\n            var presentReport = listReports[i];\n            var start = startDate;\n            var finish = finishDate\n            \n            presentReport.monthData = [];\n            console.log('START');\n            console.log(start.format('YYYY-MM-DD'));\n            console.log('STARTDATE');\n            console.log(startDate.format('YYYY-MM-DD'));\n            console.log('FINISH');\n            console.log(finish.format('YYYY-MM-DD'));\n\n            while (moment(finish.format('YYYY-MM-DD')).isAfter(start.format('YYYY-MM-DD'))) {\n                var visitsOnDay = 0;\n                for (let z = 0; z < allLogs.length; z++) {\n                    if ((allLogs[z].date == start.format('DD.MM')) && (allLogs[z].title === presentReport.name)) {\n                        visitsOnDay++;\n                    }\n                }\n\n                var oneDayValue = {\n                    x: start.format('DD.MM'),\n                    y: visitsOnDay\n                };\n\n                start = start.add(1, 'days');\n                presentReport.monthData.push(oneDayValue);\n            }\n        }\n\n        return listReports;\n    }\n\n    getDefaultChart() {\n        var currentlyDate = moment(new Date(), 'DD.MM');\n        var startDate = currentlyDate.subtract(15, \"days\");\n        var defaultDays = [];\n\n        for (let i = 15; i > 0; i--) {\n\n            var oneDay = {\n                x: startDate.format('DD.MM'),\n                y: 0\n            };\n\n            startDate = startDate.add(1, \"days\");\n            defaultDays.push(oneDay);\n        }\n\n        return defaultDays;\n    }\n\n    render() {\n        return (\n            <div id=\"maskComponent\">\n                {!this.state.loading ? <Loader /> : null}\n                <div className=\"sidebar\" id=\"sidebar\">\n                    <Navigation activeItem={7718} />\n                </div>\n                <div className=\"panel\" id=\"panel\">\n                    <ReportsWorkspace\n                        chartReports={this.state.chartReports}\n                        startDate={this.state.startDate}\n                        finishDate={this.state.finishDate}\n                        defaultChart={this.state.defaultChart}\n                        settingPeriod={this.state.settingPeriod}\n                        setPeriod={this.setPeriod}\n                    />\n                </div>                        \n            </div>\n        );\n    }\n}\n\nexport default Reports;\n\n"]},"metadata":{},"sourceType":"module"}