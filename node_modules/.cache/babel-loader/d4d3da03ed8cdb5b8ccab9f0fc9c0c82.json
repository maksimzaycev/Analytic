{"ast":null,"code":"import _classCallCheck from \"/Users/maksimzajcev/Desktop/Work/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/maksimzajcev/Desktop/Work/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/maksimzajcev/Desktop/Work/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/maksimzajcev/Desktop/Work/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/maksimzajcev/Desktop/Work/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/maksimzajcev/Desktop/Work/src/components/React.day.js\";\nimport React from 'react';\nimport mongoose from 'mongoose';\nimport Navigation from './React.nav';\nimport Loader from './React.loader';\nimport moment from 'moment';\nimport DayWorkspace from './React.day.workspace';\nimport '../css/main.css';\nvar urlLogs = 'http://localhost:3000/logs';\n\nvar Day =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Day, _React$Component);\n\n  function Day(props) {\n    var _this;\n\n    _classCallCheck(this, Day);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Day).call(this, props));\n\n    _this.setDate = function (changedDate) {\n      _this.setState({\n        loading: false\n      });\n\n      var formatedDate = moment(changedDate, 'YYYY-MM-DD').format('DD.MM.YYYY');\n\n      _this.loadData(formatedDate);\n    };\n\n    _this.state = {\n      chartDayVisits: [],\n      chartDayViews: [],\n      tableDay: [],\n      settingDate: moment(new Date()).format('DD.MM.YYYY'),\n      loading: false\n    };\n    return _this;\n  }\n\n  _createClass(Day, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.loadData(this.state.settingDate);\n    }\n  }, {\n    key: \"loadData\",\n    value: function loadData(date) {\n      var _this2 = this;\n\n      console.log(\"Загружаемая дата:\");\n      console.log(date);\n      fetch(urlLogs + '?date=' + date).then(function (response) {\n        var mongoData = mongoose.connect('mongodb://localhost:27017/gazprom');\n        console.log(mongoData);\n        return response.json();\n      }).then(function (result) {\n        return _this2.parseData(result);\n      }).catch(function (e) {\n        return console.log(e);\n      });\n    }\n  }, {\n    key: \"parseData\",\n    value: function parseData(usersLogs, date) {\n      var chartDayVisits = this.getChartDayVisits(usersLogs);\n      var chartDayViews = this.getChartDayViews(usersLogs);\n      var chartDayDefault = this.getChartDayDefault();\n      var tableDay = this.getTableDay(chartDayVisits, chartDayViews);\n      var charts = {\n        visits: {\n          chartId: 4501,\n          data: chartDayVisits,\n          display: true,\n          color: '#3fa6e9'\n        },\n        views: {\n          chartId: 4502,\n          data: chartDayViews,\n          display: true,\n          color: '#127bbf'\n        },\n        default: {\n          chartId: 4503,\n          data: chartDayDefault,\n          display: true,\n          color: '#127bbf'\n        }\n      };\n      console.log('Пришедшиее логи: ');\n      console.log(usersLogs);\n      console.log('Таблица: ');\n      console.log(tableDay);\n      console.log('Графики: ');\n      console.log(charts);\n      this.setState({\n        charts: charts,\n        tableDay: tableDay,\n        settingDate: date,\n        loading: true\n      });\n    }\n  }, {\n    key: \"getChartDayVisits\",\n    value: function getChartDayVisits(userLogs) {\n      var dayData = [];\n      var startHour = moment('00:00', 'HH:mm');\n      var finishHour = moment('01:00', 'HH:mm');\n\n      for (var i = 0; i < 24; i++) {\n        var hourData = {\n          x: startHour.format('HH:mm'),\n          y: 0\n        };\n\n        for (var j = 0; j < userLogs.length; j++) {\n          var visitTime = moment(userLogs[j].time, 'HH:mm');\n\n          if (visitTime.isBetween(startHour, finishHour, 'hours', '[)')) {\n            hourData.y++;\n          }\n        }\n\n        dayData.push(hourData);\n        startHour = startHour.add(1, \"hours\");\n        finishHour = finishHour.add(1, \"hours\");\n      }\n\n      return dayData;\n    }\n  }, {\n    key: \"getChartDayViews\",\n    value: function getChartDayViews(userLogs) {\n      var dayData = [];\n      var startHour = moment('00:00', 'HH:mm');\n      var finishHour = moment('01:00', 'HH:mm');\n\n      for (var i = 0; i < 24; i++) {\n        var hourData = {\n          x: startHour.format('HH:mm'),\n          y: 0\n        };\n\n        for (var j = 0; j < userLogs.length; j++) {\n          var visitTime = moment(userLogs[j].time, 'HH:mm');\n\n          if (visitTime.isBetween(startHour, finishHour, 'hours', '[)')) {\n            hourData.y += userLogs[j].logItems.length;\n          }\n        }\n\n        dayData.push(hourData);\n        startHour = startHour.add(1, \"hours\");\n        finishHour = finishHour.add(1, \"hours\");\n      }\n\n      return dayData;\n    }\n  }, {\n    key: \"getChartDayDefault\",\n    value: function getChartDayDefault() {\n      var dayData = [];\n      var startHour = moment('00:00', 'HH:mm');\n      var finishHour = moment('01:00', 'HH:mm');\n\n      for (var i = 0; i < 24; i++) {\n        var hourData = {\n          x: startHour.format('HH:mm'),\n          y: 0\n        };\n        dayData.push(hourData);\n        startHour = startHour.add(1, \"hours\");\n        finishHour = finishHour.add(1, \"hours\");\n      }\n\n      return dayData;\n    }\n  }, {\n    key: \"getTableDay\",\n    value: function getTableDay(visitsChart, viewsChart) {\n      var tableData = [];\n      var startHour = moment('00:00', 'HH:mm');\n      var finishHour = moment('01:00', 'HH:mm');\n\n      for (var i = 0; i < 24; i++) {\n        var hourData = {\n          start: startHour.format('HH:mm'),\n          finish: finishHour.format('HH:mm'),\n          visits: visitsChart[i].y,\n          views: viewsChart[i].y\n        };\n        tableData.push(hourData);\n        startHour = startHour.add(1, \"hours\");\n        finishHour = finishHour.add(1, \"hours\");\n      }\n\n      return tableData;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        id: \"maskComponent\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, !this.state.loading ? React.createElement(Loader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }) : null, React.createElement(\"div\", {\n        className: \"sidebar\",\n        id: \"sidebar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(Navigation, {\n        activeItem: 7711,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"panel\",\n        id: \"panel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(DayWorkspace, {\n        charts: this.state.charts,\n        tableDay: this.state.tableDay,\n        settingDate: this.state.settingDate,\n        setDate: this.setDate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Day;\n}(React.Component);\n\nexport default Day;","map":{"version":3,"sources":["/Users/maksimzajcev/Desktop/Work/src/components/React.day.js"],"names":["React","mongoose","Navigation","Loader","moment","DayWorkspace","urlLogs","Day","props","setDate","changedDate","setState","loading","formatedDate","format","loadData","state","chartDayVisits","chartDayViews","tableDay","settingDate","Date","date","console","log","fetch","then","response","mongoData","connect","json","result","parseData","catch","e","usersLogs","getChartDayVisits","getChartDayViews","chartDayDefault","getChartDayDefault","getTableDay","charts","visits","chartId","data","display","color","views","default","userLogs","dayData","startHour","finishHour","i","hourData","x","y","j","length","visitTime","time","isBetween","push","add","logItems","visitsChart","viewsChart","tableData","start","finish","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport mongoose from 'mongoose';\nimport Navigation from './React.nav';\nimport Loader from './React.loader';\nimport moment from 'moment'\nimport DayWorkspace from './React.day.workspace';\nimport '../css/main.css';\n\nconst urlLogs = 'http://localhost:3000/logs';\n\nclass Day extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            chartDayVisits: [],\n            chartDayViews: [],\n            tableDay: [],\n            settingDate: moment(new Date()).format('DD.MM.YYYY'), \n            loading: false\n        };\n    }\n\n    componentWillMount() {\n        this.loadData(this.state.settingDate);\n    }\n\n    loadData(date) {\n        console.log(\"Загружаемая дата:\");\n        console.log(date);\n        fetch(urlLogs + '?date=' + date)\n            .then(function(response) {\n                let mongoData = mongoose.connect('mongodb://localhost:27017/gazprom');\n\n                console.log(mongoData);\n\n                return response.json();\n            })\n            .then(result => this.parseData(result))\n            .catch(e => console.log(e));\n    }\n\n    parseData(usersLogs, date) {\n\n        var chartDayVisits = this.getChartDayVisits(usersLogs);\n        var chartDayViews = this.getChartDayViews(usersLogs);\n        var chartDayDefault = this.getChartDayDefault();\n        var tableDay = this.getTableDay(chartDayVisits, chartDayViews);\n        var charts = {\n            visits: {\n                chartId: 4501,\n                data: chartDayVisits,\n                display: true,\n                color: '#3fa6e9'\n            },\n            views: {\n                chartId: 4502,\n                data: chartDayViews,\n                display: true,\n                color: '#127bbf'\n            },\n            default: {\n                chartId: 4503,\n                data: chartDayDefault,\n                display: true,\n                color: '#127bbf'\n            }\n        };\n\n        console.log('Пришедшиее логи: ');\n        console.log(usersLogs);\n        console.log('Таблица: ');\n        console.log(tableDay);\n        console.log('Графики: ');\n        console.log(charts);\n\n        this.setState({\n            charts: charts,\n            tableDay: tableDay,\n            settingDate: date,\n            loading: true\n        });\n    }\n\n    setDate = (changedDate) => {\n        this.setState({\n            loading: false\n        });\n\n        var formatedDate = moment(changedDate, 'YYYY-MM-DD').format('DD.MM.YYYY');\n        this.loadData(formatedDate);\n    }\n\n    getChartDayVisits(userLogs) {\n        var dayData = [];\n        var startHour = moment('00:00', 'HH:mm');\n        var finishHour = moment('01:00', 'HH:mm');\n\n        for (let i = 0; i < 24; i++) {\n            var hourData = {\n                x: startHour.format('HH:mm'),\n                y: 0\n            }\n\n            for (let j = 0; j < userLogs.length; j++) {\n                var visitTime = moment(userLogs[j].time, 'HH:mm');\n                if (visitTime.isBetween(startHour, finishHour, 'hours', '[)')) {\n                    hourData.y++;\n                }\n            }\n\n            dayData.push(hourData);\n            startHour = startHour.add(1, \"hours\");\n            finishHour = finishHour.add(1, \"hours\");\n        }\n\n        return dayData;\n    }\n\n    getChartDayViews(userLogs) {\n        var dayData = [];\n        var startHour = moment('00:00', 'HH:mm');\n        var finishHour = moment('01:00', 'HH:mm');\n\n        for (let i = 0; i < 24; i++) {\n            var hourData = {\n                x: startHour.format('HH:mm'),\n                y: 0\n            }\n\n            for (let j = 0; j < userLogs.length; j++) {\n                var visitTime = moment(userLogs[j].time, 'HH:mm');\n                if (visitTime.isBetween(startHour, finishHour, 'hours', '[)')) {\n                    hourData.y += userLogs[j].logItems.length;\n                }\n            }\n\n            dayData.push(hourData);\n            startHour = startHour.add(1, \"hours\");\n            finishHour = finishHour.add(1, \"hours\");\n        }\n\n        return dayData;\n    }\n\n    getChartDayDefault() {\n        var dayData = [];\n        var startHour = moment('00:00', 'HH:mm');\n        var finishHour = moment('01:00', 'HH:mm');\n\n        for (let i = 0; i < 24; i++) {\n            var hourData = {\n                x: startHour.format('HH:mm'),\n                y: 0\n            }\n\n            dayData.push(hourData);\n            startHour = startHour.add(1, \"hours\");\n            finishHour = finishHour.add(1, \"hours\");\n        }\n\n        return dayData;\n    }\n\n    getTableDay(visitsChart,viewsChart) {\n        var tableData = [];\n\n        var startHour = moment('00:00', 'HH:mm');\n        var finishHour = moment('01:00', 'HH:mm');\n\n        for (let i = 0; i < 24; i++) {\n            var hourData = {\n                start: startHour.format('HH:mm'),\n                finish: finishHour.format('HH:mm'),\n                visits: visitsChart[i].y,\n                views: viewsChart[i].y\n            }\n\n            tableData.push(hourData);\n            startHour = startHour.add(1, \"hours\");\n            finishHour = finishHour.add(1, \"hours\");\n        }\n\n        return tableData;\n    }\n\n    render() {\n        return (\n            <div id=\"maskComponent\">\n                {!this.state.loading ? <Loader /> : null}\n                <div className=\"sidebar\" id=\"sidebar\">\n                    <Navigation activeItem={7711} />\n                </div>\n                <div className=\"panel\" id=\"panel\">\n                    <DayWorkspace\n                        charts={this.state.charts}\n                        tableDay={this.state.tableDay}\n                        settingDate={this.state.settingDate}\n                        setDate={this.setDate}\n                    />\n                </div>                        \n            </div>\n        );\n    }\n}\n\nexport default Day;\n\n"]},"metadata":{},"sourceType":"module"}