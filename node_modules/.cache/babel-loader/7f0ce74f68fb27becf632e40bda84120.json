{"ast":null,"code":"import _classCallCheck from \"/Users/maksimzajcev/Desktop/Work/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/maksimzajcev/Desktop/Work/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/maksimzajcev/Desktop/Work/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/maksimzajcev/Desktop/Work/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/maksimzajcev/Desktop/Work/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/maksimzajcev/Desktop/Work/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/maksimzajcev/Desktop/Work/src/components/React.month.chart.js\";\nimport React from 'react';\nimport 'react-vis/dist/style.css';\nimport '../css/main.css';\nimport { XYPlot, XAxis, YAxis, HorizontalGridLines, VerticalGridLines, DiscreteColorLegend, LineMarkSeries, VerticalBarSeries } from 'react-vis';\nvar ITEMS = [{\n  title: 'Количество уникальных пользователей',\n  color: '#84c9f6',\n  strokeWidth: 2\n}, {\n  title: 'Количество визитов в систему',\n  color: '#3fa6e9',\n  strokeWidth: 2\n}, {\n  title: 'Количество просмотренных отчетов',\n  color: '#127bbf',\n  strokeWidth: 2\n}];\n\nvar MonthChart =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MonthChart, _React$Component);\n\n  function MonthChart(props) {\n    var _this;\n\n    _classCallCheck(this, MonthChart);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MonthChart).call(this, props));\n    _this.toggleChart = _this.toggleChart.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      charts: []\n    };\n    return _this;\n  }\n\n  _createClass(MonthChart, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      console.log(\" * * * КОМПОНЕНТ ГРАФИКА С НОВЫМИ PROPS * * * \");\n      console.log(this.restructuralCharts(nextProps.charts));\n      this.setState({\n        charts: this.restructuralCharts(nextProps.charts)\n      });\n    }\n  }, {\n    key: \"restructuralCharts\",\n    value: function restructuralCharts(charts) {\n      var resultCharts = Object.keys(charts).map(function (key) {\n        return charts[key];\n      });\n      return resultCharts;\n    }\n  }, {\n    key: \"toggleChart\",\n    value: function toggleChart(event) {\n      var charts = this.props.charts;\n      var presentButton = event.target;\n      var presentButtonType = presentButton.getAttribute('data-type');\n\n      if (presentButtonType === 'users') {\n        if (presentButton.classList.contains('title__button--active')) {\n          presentButton.classList.remove('title__button--active');\n          presentButton.classList.add('title__button--disabled');\n          charts.users.display = false;\n          this.setState({\n            charts: this.restructuralCharts(charts)\n          });\n        } else {\n          presentButton.classList.remove('title__button--disabled');\n          presentButton.classList.add('title__button--active');\n          charts.users.display = true;\n          this.setState({\n            charts: this.restructuralCharts(charts)\n          });\n        }\n      } else if (presentButtonType === 'visits') {\n        if (presentButton.classList.contains('title__button--active')) {\n          presentButton.classList.remove('title__button--active');\n          presentButton.classList.add('title__button--disabled');\n          charts.visits.display = false;\n          this.setState({\n            charts: this.restructuralCharts(charts)\n          });\n        } else {\n          presentButton.classList.remove('title__button--disabled');\n          presentButton.classList.add('title__button--active');\n          charts.visits.display = true;\n          this.setState({\n            charts: this.restructuralCharts(charts)\n          });\n        }\n      } else if (presentButtonType === 'views') {\n        if (presentButton.classList.contains('title__button--active')) {\n          presentButton.classList.remove('title__button--active');\n          presentButton.classList.add('title__button--disabled');\n          charts.views.display = false;\n          this.setState({\n            charts: this.restructuralCharts(charts)\n          });\n        } else {\n          presentButton.classList.remove('title__button--disabled');\n          presentButton.classList.add('title__button--active');\n          charts.views.display = true;\n          this.setState({\n            charts: this.restructuralCharts(charts)\n          });\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var widthChart = Math.round(document.body.clientWidth * 0.80);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"title__buttons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"title__button title__button--active\",\n        onClick: this.toggleChart,\n        \"data-type\": \"users\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"\\u0423\\u043D\\u0438\\u043A\\u0430\\u043B\\u044C\\u043D\\u044B\\u0435 \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u0438\"), React.createElement(\"span\", {\n        className: \"title__button title__button--active\",\n        onClick: this.toggleChart,\n        \"data-type\": \"visits\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \"\\u0412\\u0438\\u0437\\u0438\\u0442\\u044B\"), React.createElement(\"span\", {\n        className: \"title__button title__button--active\",\n        onClick: this.toggleChart,\n        \"data-type\": \"views\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \"\\u041F\\u0440\\u043E\\u0441\\u043C\\u043E\\u0442\\u0440\\u044B\")), React.createElement(XYPlot, {\n        xType: \"ordinal\",\n        width: widthChart,\n        height: 300,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(HorizontalGridLines, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }), React.createElement(VerticalGridLines, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }), React.createElement(XAxis, {\n        tickLabelAngle: 0,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }), React.createElement(YAxis, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }), this.state.charts.map(function (chart) {\n        return chart.display ? React.createElement(LineMarkSeries, {\n          key: chart.chartId,\n          className: \"linemark-series-example-2\",\n          curve: 'curveMonotoneX',\n          data: chart.data,\n          color: chart.color,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        }) : React.createElement(VerticalBarSeries, {\n          key: chart.chartId,\n          className: \"linemark-series-example-2\",\n          curve: 'curveMonotoneX',\n          data: _this2.props.defaultChart,\n          color: chart.color,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          },\n          __self: this\n        });\n      })), React.createElement(DiscreteColorLegend, {\n        className: \"chart__legend\",\n        width: 770,\n        items: ITEMS,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return MonthChart;\n}(React.Component);\n\nexport default MonthChart;","map":{"version":3,"sources":["/Users/maksimzajcev/Desktop/Work/src/components/React.month.chart.js"],"names":["React","XYPlot","XAxis","YAxis","HorizontalGridLines","VerticalGridLines","DiscreteColorLegend","LineMarkSeries","VerticalBarSeries","ITEMS","title","color","strokeWidth","MonthChart","props","toggleChart","bind","state","charts","nextProps","console","log","restructuralCharts","setState","resultCharts","Object","keys","map","key","event","presentButton","target","presentButtonType","getAttribute","classList","contains","remove","add","users","display","visits","views","widthChart","Math","round","document","body","clientWidth","chart","chartId","data","defaultChart","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport 'react-vis/dist/style.css';\nimport '../css/main.css';\nimport {\n  XYPlot,\n  XAxis,\n  YAxis,\n  HorizontalGridLines,\n  VerticalGridLines,\n  DiscreteColorLegend,\n  LineMarkSeries,\n  VerticalBarSeries\n} from 'react-vis';\n\nconst ITEMS = [\n    {title: 'Количество уникальных пользователей', color: '#84c9f6', strokeWidth: 2},\n    {title: 'Количество визитов в систему', color: '#3fa6e9', strokeWidth: 2},\n    {title: 'Количество просмотренных отчетов', color: '#127bbf', strokeWidth: 2}\n];\n\nclass MonthChart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.toggleChart = this.toggleChart.bind(this);\n\n        this.state = {\n            charts: []\n        };\n    }\n\n    componentWillReceiveProps(nextProps) {\n        console.log(\" * * * КОМПОНЕНТ ГРАФИКА С НОВЫМИ PROPS * * * \");\n        console.log(this.restructuralCharts(nextProps.charts))\n\n        this.setState({\n            charts: this.restructuralCharts(nextProps.charts)\n        });\n    }\n\n    restructuralCharts(charts) {\n        var resultCharts = Object.keys(charts).map(function(key) {\n            return charts[key];\n        });\n\n        return resultCharts;\n    }\n\n    toggleChart(event) {\n        var charts = this.props.charts;\n        var presentButton = event.target;\n        var presentButtonType = presentButton.getAttribute('data-type');\n        if (presentButtonType === 'users') {\n            if (presentButton.classList.contains('title__button--active')) {\n                presentButton.classList.remove('title__button--active');\n                presentButton.classList.add('title__button--disabled');\n                charts.users.display = false;\n                this.setState({\n                    charts: this.restructuralCharts(charts)\n                });\n            } else {\n                presentButton.classList.remove('title__button--disabled');\n                presentButton.classList.add('title__button--active');\n                charts.users.display = true;\n                this.setState({\n                    charts: this.restructuralCharts(charts)\n                });\n            }\n        } else if (presentButtonType === 'visits') {\n            if (presentButton.classList.contains('title__button--active')) {\n                presentButton.classList.remove('title__button--active');\n                presentButton.classList.add('title__button--disabled');\n                charts.visits.display = false;\n                this.setState({\n                    charts: this.restructuralCharts(charts)\n                });\n            } else {\n                presentButton.classList.remove('title__button--disabled');\n                presentButton.classList.add('title__button--active');\n                charts.visits.display = true;\n                this.setState({\n                    charts: this.restructuralCharts(charts)\n                });\n            }\n        } else if (presentButtonType === 'views') {\n            if (presentButton.classList.contains('title__button--active')) {\n                presentButton.classList.remove('title__button--active');\n                presentButton.classList.add('title__button--disabled');\n                charts.views.display = false;\n                this.setState({\n                    charts: this.restructuralCharts(charts)\n                });\n            } else {\n                presentButton.classList.remove('title__button--disabled');\n                presentButton.classList.add('title__button--active');\n                charts.views.display = true;\n                this.setState({\n                    charts: this.restructuralCharts(charts)\n                });\n            }\n        }\n    }\n\n    render() {\n        var widthChart = Math.round(document.body.clientWidth * 0.80);\n        return (\n            <div>\n                <div className=\"title__buttons\">\n                    <span className=\"title__button title__button--active\" onClick={this.toggleChart} data-type=\"users\">Уникальные пользователи</span>\n                    <span className=\"title__button title__button--active\" onClick={this.toggleChart} data-type=\"visits\">Визиты</span>\n                    <span className=\"title__button title__button--active\" onClick={this.toggleChart} data-type=\"views\">Просмотры</span>\n                </div>                \n                <XYPlot xType=\"ordinal\" width={widthChart} height={300}>\n                    <HorizontalGridLines/>\n                    <VerticalGridLines />\n                    <XAxis tickLabelAngle={0} />\n                    <YAxis />\n                    {   \n                        this.state.charts.map(chart => (\n                            chart.display ?\n                            <LineMarkSeries\n                                key={chart.chartId}\n                                className=\"linemark-series-example-2\"\n                                curve={'curveMonotoneX'}\n                                data={chart.data}\n                                color={chart.color}\n                            /> : \n                            <VerticalBarSeries\n                                key={chart.chartId}\n                                className=\"linemark-series-example-2\"\n                                curve={'curveMonotoneX'}\n                                data={this.props.defaultChart}\n                                color={chart.color}\n                            />\n                        ))\n                    }\n                </XYPlot>\n                <DiscreteColorLegend className=\"chart__legend\" width={770} items={ITEMS} />\n            </div>\n        );\n    }\n}\n\nexport default MonthChart;\n"]},"metadata":{},"sourceType":"module"}