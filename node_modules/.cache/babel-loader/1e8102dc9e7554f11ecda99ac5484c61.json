{"ast":null,"code":"import _classCallCheck from \"/Users/maksimzajcev/Desktop/Work/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/maksimzajcev/Desktop/Work/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/maksimzajcev/Desktop/Work/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/maksimzajcev/Desktop/Work/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/maksimzajcev/Desktop/Work/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/maksimzajcev/Desktop/Work/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/maksimzajcev/Desktop/Work/src/components/React.day.chart.js\";\nimport React from 'react';\nimport 'react-vis/dist/style.css';\nimport '../css/main.css';\nimport { XYPlot, XAxis, YAxis, HorizontalGridLines, VerticalGridLines, VerticalBarSeries, DiscreteColorLegend } from 'react-vis';\nvar ITEMS = [{\n  title: 'Визиты',\n  color: '#3fa6e9',\n  strokeWidth: 14\n}, {\n  title: 'Просмотры',\n  color: '#127bbf',\n  strokeWidth: 14\n}];\n\nvar DayChart =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DayChart, _React$Component);\n\n  function DayChart(props) {\n    var _this;\n\n    _classCallCheck(this, DayChart);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DayChart).call(this, props));\n    _this.toggleChart = _this.toggleChart.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      charts: []\n    };\n    return _this;\n  }\n\n  _createClass(DayChart, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      console.log(\" * * * КОМПОНЕНТ ГРАФИКА С НОВЫМИ PROPS * * * \");\n      console.log(this.restructuralCharts(nextProps.charts));\n      this.setState({\n        charts: this.restructuralCharts(nextProps.charts)\n      });\n    }\n  }, {\n    key: \"restructuralCharts\",\n    value: function restructuralCharts(charts) {\n      var resultCharts = Object.keys(charts).map(function (key) {\n        return charts[key];\n      });\n      return resultCharts;\n    }\n  }, {\n    key: \"toggleChart\",\n    value: function toggleChart(event) {\n      var charts = this.props.charts;\n      var presentButton = event.target;\n      var presentButtonType = presentButton.getAttribute('data-type');\n\n      if (presentButton.classList.contains('title__button--active')) {\n        presentButton.classList.remove('title__button--active');\n        presentButton.classList.add('title__button--disabled');\n        charts[presentButtonType].display = false;\n        this.setState({\n          charts: this.restructuralCharts(charts)\n        });\n      } else {\n        presentButton.classList.remove('title__button--disabled');\n        presentButton.classList.add('title__button--active');\n        charts[presentButtonType].display = true;\n        this.setState({\n          charts: this.restructuralCharts(charts)\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var widthChart = Math.round(document.body.clientWidth * 0.80);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"title__buttons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"title__button title__button--active\",\n        onClick: this.toggleChart,\n        \"data-type\": \"views\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \"\\u0423\\u043D\\u0438\\u043A\\u0430\\u043B\\u044C\\u043D\\u044B\\u0435 \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u0438\"), React.createElement(\"span\", {\n        className: \"title__button title__button--active\",\n        onClick: this.toggleChart,\n        \"data-type\": \"visits\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"\\u0412\\u0438\\u0437\\u0438\\u0442\\u044B\")), React.createElement(XYPlot, {\n        xType: \"ordinal\",\n        width: widthChart,\n        height: 300,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(HorizontalGridLines, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }), React.createElement(VerticalGridLines, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }), React.createElement(XAxis, {\n        tickLabelAngle: 0,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }), React.createElement(YAxis, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }), this.state.charts.map(function (chart) {\n        return chart.display ? React.createElement(VerticalBarSeries, {\n          key: chart.chartId,\n          data: chart.data,\n          color: chart.color,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }) : null;\n      })), React.createElement(DiscreteColorLegend, {\n        className: \"chart__legend\",\n        width: 200,\n        items: ITEMS,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return DayChart;\n}(React.Component);\n\nexport default DayChart;","map":{"version":3,"sources":["/Users/maksimzajcev/Desktop/Work/src/components/React.day.chart.js"],"names":["React","XYPlot","XAxis","YAxis","HorizontalGridLines","VerticalGridLines","VerticalBarSeries","DiscreteColorLegend","ITEMS","title","color","strokeWidth","DayChart","props","toggleChart","bind","state","charts","nextProps","console","log","restructuralCharts","setState","resultCharts","Object","keys","map","key","event","presentButton","target","presentButtonType","getAttribute","classList","contains","remove","add","display","widthChart","Math","round","document","body","clientWidth","chart","chartId","data","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport 'react-vis/dist/style.css';\nimport '../css/main.css';\nimport {\n  XYPlot,\n  XAxis,\n  YAxis,\n  HorizontalGridLines,\n  VerticalGridLines,\n  VerticalBarSeries,\n  DiscreteColorLegend\n} from 'react-vis';\n\nconst ITEMS = [\n  {title: 'Визиты', color: '#3fa6e9', strokeWidth: 14},\n  {title: 'Просмотры', color: '#127bbf', strokeWidth: 14}\n];\n\nclass DayChart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.toggleChart = this.toggleChart.bind(this);\n\n        this.state = {\n            charts: []\n        };\n    }\n\n    componentWillReceiveProps(nextProps) {\n        console.log(\" * * * КОМПОНЕНТ ГРАФИКА С НОВЫМИ PROPS * * * \");\n        console.log(this.restructuralCharts(nextProps.charts))\n\n        this.setState({\n            charts: this.restructuralCharts(nextProps.charts)\n        });\n    }\n\n    restructuralCharts(charts) {\n        var resultCharts = Object.keys(charts).map(function(key) {\n            return charts[key];\n        });\n\n        return resultCharts;\n    }\n\n    toggleChart(event) {\n        var charts = this.props.charts;\n        var presentButton = event.target;\n        var presentButtonType = presentButton.getAttribute('data-type');\n\n        if (presentButton.classList.contains('title__button--active')) {\n            presentButton.classList.remove('title__button--active');\n            presentButton.classList.add('title__button--disabled');\n            charts[presentButtonType].display = false;\n            this.setState({\n                charts: this.restructuralCharts(charts)\n            });\n        } else {\n            presentButton.classList.remove('title__button--disabled');\n            presentButton.classList.add('title__button--active');\n            charts[presentButtonType].display = true;\n            this.setState({\n                charts: this.restructuralCharts(charts)\n            });\n        }\n    }\n\n    render() {\n        var widthChart = Math.round(document.body.clientWidth * 0.80);\n        return (\n            <div>\n                <div className=\"title__buttons\">\n                    <span className=\"title__button title__button--active\" onClick={this.toggleChart} data-type=\"views\">Уникальные пользователи</span>\n                    <span className=\"title__button title__button--active\" onClick={this.toggleChart} data-type=\"visits\">Визиты</span>\n                </div>  \n                <XYPlot xType=\"ordinal\" width={widthChart} height={300}>\n                    <HorizontalGridLines/>\n                    <VerticalGridLines />\n                    <XAxis tickLabelAngle={0} />\n                    <YAxis />\n                    {   \n                        this.state.charts.map(chart => (\n                            chart.display ?\n                            <VerticalBarSeries\n                                key={chart.chartId}\n                                data={chart.data}\n                                color={chart.color}\n                            /> : null\n                        ))\n                    }\n                </XYPlot>\n                <DiscreteColorLegend className=\"chart__legend\" width={200} items={ITEMS} />\n            </div>\n        );\n    }\n}\n\nexport default DayChart;\n"]},"metadata":{},"sourceType":"module"}